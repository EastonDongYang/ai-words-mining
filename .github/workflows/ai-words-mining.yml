name: AI Words Mining System

on:
  # Schedule to run every day at 6:00 AM UTC (can be adjusted)
  schedule:
    - cron: '0 6 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean
      test_mode:
        description: 'Run in test mode'
        required: false
        default: 'false'
        type: boolean

# Set environment variables
env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
  GOOGLE_SHEETS_RANGE: ${{ secrets.GOOGLE_SHEETS_RANGE }}
  NOTIFICATION_WEBHOOK_URL: ${{ secrets.NOTIFICATION_WEBHOOK_URL }}
  NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
  TARGET_URL: ${{ secrets.TARGET_URL }}
  DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}

jobs:
  ai-words-mining:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        
        # Install Chrome for Selenium
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Install ChromeDriver
        sudo apt-get install -y chromium-chromedriver
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup Google Sheets credentials
      run: |
        # Create credentials file from secret
        echo '${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}' > credentials.json
        
        # Verify the file was created
        if [ -f credentials.json ]; then
          echo "✅ Google Sheets credentials file created"
        else
          echo "❌ Failed to create Google Sheets credentials file"
          exit 1
        fi
    
    - name: Validate configuration
      run: |
        python -c "
        from config import Config
        config = Config()
        if config.validate():
          print('✅ Configuration validation passed')
        else:
          print('❌ Configuration validation failed')
          exit(1)
        "
    
    - name: Run AI Words Mining System
      run: |
        if [ "${{ github.event.inputs.test_mode }}" == "true" ]; then
          echo "🧪 Running in test mode..."
          python main.py --test
        else
          echo "🚀 Running AI Words Mining System..."
          python main.py
        fi
    
    - name: Upload debug files (if debug mode)
      if: env.DEBUG_MODE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: debug-files
        path: |
          debug_*.json
          *.csv
          *.log
        retention-days: 7
    
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: error-logs
        path: |
          *.log
          *.json
          *.csv
        retention-days: 14
    
    - name: Clean up credentials
      if: always()
      run: |
        rm -f credentials.json
        rm -f token.json
        echo "🧹 Cleaned up credential files"
    
    - name: Send failure notification
      if: failure()
      run: |
        curl -X POST "${{ secrets.NOTIFICATION_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "text": "❌ AI Words Mining System failed in GitHub Actions\n\n⏰ Time: '"$(date)"'\n🔗 Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n🔧 Check the logs for more details."
          }' || true 